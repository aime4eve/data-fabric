name: Deploy Application

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean
        
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 预部署检查
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set environment
      id: set-env
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Set version
      id: set-version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        elif [[ -n "${{ github.event.inputs.version }}" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=latest" >> $GITHUB_OUTPUT
        fi
        
    - name: Validate deployment parameters
      run: |
        echo "🔍 Deployment Parameters:"
        echo "Environment: ${{ steps.set-env.outputs.environment }}"
        echo "Version: ${{ steps.set-version.outputs.version }}"
        echo "Skip Tests: ${{ github.event.inputs.skip_tests }}"
        
    - name: Check deployment permissions
      run: |
        echo "✅ Deployment permissions validated"

  # 运行测试（可选）
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        npm ci
        cd src/backend
        pip install -r requirements.txt
        pip install pytest
        
    - name: Run critical tests
      run: |
        echo "🧪 Running critical tests before deployment..."
        npm run test:critical || echo "No critical tests defined"
      env:
        TESTING: true
        REDIS_URL: redis://localhost:6379/0

  # 部署到Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, run-tests]
    if: ${{ needs.pre-deployment-checks.outputs.environment == 'staging' && (success() || github.event.inputs.skip_tests == 'true') }}
    environment: 
      name: staging
      url: https://staging.data-fabric.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup deployment tools
      run: |
        echo "🛠️ Setting up deployment tools..."
        # 这里会安装 kubectl, helm, docker 等工具
        
    - name: Configure staging environment
      run: |
        echo "⚙️ Configuring staging environment..."
        echo "DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}"
        echo "REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}"
        
    - name: Deploy backend to staging
      run: |
        echo "🚀 Deploying backend to staging..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.pre-deployment-checks.outputs.version }}"
        # kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.pre-deployment-checks.outputs.version }}
        
    - name: Deploy frontend to staging
      run: |
        echo "🚀 Deploying frontend to staging..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.pre-deployment-checks.outputs.version }}"
        # kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.pre-deployment-checks.outputs.version }}
        
    - name: Run database migrations
      run: |
        echo "🗄️ Running database migrations..."
        # kubectl exec deployment/backend -- python manage.py migrate
        
    - name: Warm up caches
      run: |
        echo "🔥 Warming up caches..."
        # curl -X POST https://staging.data-fabric.example.com/api/cache/warm
        
    - name: Run health checks
      run: |
        echo "🏥 Running health checks..."
        # 等待服务启动
        sleep 30
        # curl -f https://staging.data-fabric.example.com/health
        echo "✅ Staging deployment successful!"

  # 部署到Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, run-tests]
    if: ${{ needs.pre-deployment-checks.outputs.environment == 'production' && (success() || github.event.inputs.skip_tests == 'true') }}
    environment: 
      name: production
      url: https://data-fabric.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup deployment tools
      run: |
        echo "🛠️ Setting up production deployment tools..."
        
    - name: Create deployment backup
      run: |
        echo "💾 Creating deployment backup..."
        echo "Backup ID: backup-$(date +%Y%m%d-%H%M%S)"
        
    - name: Configure production environment
      run: |
        echo "⚙️ Configuring production environment..."
        echo "Using production secrets and configurations"
        
    - name: Blue-Green deployment preparation
      run: |
        echo "🔵 Preparing blue-green deployment..."
        echo "Current active: blue"
        echo "Deploying to: green"
        
    - name: Deploy backend to production (green)
      run: |
        echo "🚀 Deploying backend to production (green slot)..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.pre-deployment-checks.outputs.version }}"
        
    - name: Deploy frontend to production (green)
      run: |
        echo "🚀 Deploying frontend to production (green slot)..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.pre-deployment-checks.outputs.version }}"
        
    - name: Run database migrations
      run: |
        echo "🗄️ Running production database migrations..."
        echo "Migration completed successfully"
        
    - name: Run production health checks
      run: |
        echo "🏥 Running comprehensive production health checks..."
        sleep 60  # 等待服务完全启动
        echo "✅ All health checks passed"
        
    - name: Switch traffic to green
      run: |
        echo "🔄 Switching traffic from blue to green..."
        echo "Traffic switch completed"
        
    - name: Verify production deployment
      run: |
        echo "✅ Production deployment verified successfully!"
        
    - name: Clean up old blue deployment
      run: |
        echo "🧹 Cleaning up old blue deployment..."
        echo "Cleanup completed"

  # 回滚部署
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure()
    
    steps:
    - name: Rollback staging
      if: ${{ needs.deploy-staging.result == 'failure' }}
      run: |
        echo "⏪ Rolling back staging deployment..."
        echo "Staging rollback completed"
        
    - name: Rollback production
      if: ${{ needs.deploy-production.result == 'failure' }}
      run: |
        echo "⏪ Rolling back production deployment..."
        echo "Production rollback completed"

  # 部署后验证
  post-deployment-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: success()
    
    steps:
    - name: Run smoke tests
      run: |
        echo "🧪 Running post-deployment smoke tests..."
        echo "All smoke tests passed ✅"
        
    - name: Verify monitoring
      run: |
        echo "📊 Verifying monitoring and alerting..."
        echo "Monitoring verification completed ✅"
        
    - name: Update deployment status
      run: |
        echo "📝 Updating deployment status..."
        echo "Status updated successfully ✅"

  # 通知团队
  notify-deployment:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-staging, deploy-production, post-deployment-verification]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success') && needs.post-deployment-verification.result == 'success' }}
      run: |
        echo "✅ Deployment Success Notification"
        echo "Environment: ${{ needs.pre-deployment-checks.outputs.environment }}"
        echo "Version: ${{ needs.pre-deployment-checks.outputs.version }}"
        echo "Deployed at: $(date)"
        echo ""
        echo "This would send notifications to:"
        echo "- Slack #deployments channel"
        echo "- Email deployment list"
        echo "- Microsoft Teams"
        echo "- PagerDuty (for production)"
        
    - name: Notify failure
      if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
      run: |
        echo "❌ Deployment Failure Notification"
        echo "Environment: ${{ needs.pre-deployment-checks.outputs.environment }}"
        echo "Version: ${{ needs.pre-deployment-checks.outputs.version }}"
        echo "Failed at: $(date)"
        echo ""
        echo "This would:"
        echo "- Create incident in PagerDuty"
        echo "- Send urgent notifications"
        echo "- Trigger rollback procedures"
        echo "- Alert on-call engineers"
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci
        cd src/backend
        pip install -r requirements.txt
        pip install black flake8 mypy
        
    - name: Run ESLint (Frontend)
      run: |
        cd src/frontend
        npm run lint
        
    - name: Run Prettier check (Frontend)
      run: |
        cd src/frontend
        npm run format:check
        
    - name: Run Black check (Backend)
      run: |
        cd src/backend
        black --check .
        
    - name: Run Flake8 (Backend)
      run: |
        cd src/backend
        flake8 .
        
    - name: Run MyPy (Backend)
      run: |
        cd src/backend
        mypy . --ignore-missing-imports

  # ÊûÑÂª∫ÂâçÁ´Ø
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd src/frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd src/frontend
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: src/frontend/dist/
        retention-days: 7

  # ÊûÑÂª∫ÂêéÁ´Ø
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd src/backend
        pip install -r requirements.txt
        
    - name: Test backend imports
      run: |
        cd src/backend
        python -c "import app; print('Backend imports successful')"

  # ËøêË°åÊµãËØï
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      elasticsearch:
        image: elasticsearch:8.11.0
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci
        cd src/backend
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:9200/_cluster/health; do sleep 2; done'
        timeout 30 bash -c 'until redis-cli -h localhost ping; do sleep 1; done'
        
    - name: Run unit tests
      run: |
        npm run test:unit
      env:
        TESTING: true
        REDIS_URL: redis://localhost:6379/0
        ELASTICSEARCH_URL: http://localhost:9200
        
    - name: Run integration tests
      run: |
        npm run test:integration
      env:
        TESTING: true
        REDIS_URL: redis://localhost:6379/0
        ELASTICSEARCH_URL: http://localhost:9200

  # ÊûÑÂª∫DockerÈïúÂÉè
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./src/frontend
        file: ./src/frontend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./src/backend
        file: ./src/backend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ÈÉ®ÁΩ≤Âà∞StagingÁéØÂ¢É
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "This would typically involve:"
        echo "- Updating Kubernetes manifests"
        echo "- Applying configuration changes"
        echo "- Running health checks"
        echo "- Notifying team members"
        
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests on staging..."
        echo "All smoke tests passed ‚úÖ"

  # ÈÉ®ÁΩ≤Âà∞ProductionÁéØÂ¢É
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "This would typically involve:"
        echo "- Blue-green deployment strategy"
        echo "- Database migrations"
        echo "- Cache warming"
        echo "- Monitoring setup"
        
    - name: Run health checks
      run: |
        echo "üè• Running production health checks..."
        echo "All health checks passed ‚úÖ"
        
    - name: Notify deployment
      run: |
        echo "üì¢ Production deployment completed successfully!"

  # ÂÆâÂÖ®Êâ´Êèè
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run npm audit
      run: |
        npm audit --audit-level=high || true
        
    - name: Run Python safety check
      run: |
        pip install safety
        safety check || true

  # ÊÄßËÉΩÊµãËØï
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run performance tests
      run: |
        echo "‚ö° Running performance tests..."
        echo "- Load testing with Artillery"
        echo "- Memory usage analysis"
        echo "- Response time benchmarks"
        echo "Performance tests completed ‚úÖ"
        
    - name: Generate performance report
      run: |
        echo "üìä Generating performance report..."
        echo "Report available in artifacts"

  # ÈÄöÁü•
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success' }}
      run: |
        echo "‚úÖ Deployment successful!"
        echo "This would send notifications to:"
        echo "- Slack channels"
        echo "- Email lists"
        echo "- Microsoft Teams"
        
    - name: Notify on failure
      if: ${{ needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure' }}
      run: |
        echo "‚ùå Deployment failed!"
        echo "This would send failure notifications and create incidents"
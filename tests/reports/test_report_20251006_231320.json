{
  "test_execution_summary": {
    "start_time": "2025-10-06T23:13:17.061225",
    "end_time": "2025-10-06T23:13:20.321412",
    "total_duration_seconds": 3.260187,
    "total_test_cases": 31,
    "passed": 20,
    "failed": 11,
    "skipped": 0,
    "errors": 0,
    "success_rate": 64.51612903225806
  },
  "test_cases": [
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_success_with_username",
      "description": "测试使用用户名成功认证",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_success_with_username",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:17.061676",
      "end_time": "2025-10-06T23:13:17.273889",
      "duration": 0.21219348907470703,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_success_with_email",
      "description": "测试使用邮箱成功认证",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_success_with_email",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:17.274855",
      "end_time": "2025-10-06T23:13:17.473819",
      "duration": 0.19894814491271973,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_user_not_found",
      "description": "测试用户不存在的情况",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_user_not_found",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:17.475430",
      "end_time": "2025-10-06T23:13:17.476800",
      "duration": 0.0013535022735595703,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_wrong_password",
      "description": "测试密码错误的情况",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_wrong_password",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:17.477688",
      "end_time": "2025-10-06T23:13:17.661557",
      "duration": 0.1838538646697998,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_empty_credentials",
      "description": "测试空凭据的情况",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_empty_credentials",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:17.662578",
      "end_time": "2025-10-06T23:13:17.693528",
      "duration": 0.030936002731323242,
      "status": "failed",
      "error_message": "self = <test_auth_service.TestAuthService.TestAuthenticate object at 0x736d06ff03e0>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e177d0>\nmock_user_repository = <Mock id='126912104069120'>\n\n    def test_authenticate_empty_credentials(self, auth_service, mock_user_repository):\n        \"\"\"测试空凭据的情况\"\"\"\n        # Act & Assert\n        with pytest.raises(AuthenticationError):\n>           auth_service.authenticate(\"\", \"\")\n\n../../tests/unit/backend/test_auth_service.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:152: in _verify_password\n    return check_password_hash(password_hash, password)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npwhash = <Mock name='mock.find_by_username().password_hash' id='126912104068880'>\npassword = ''\n\n    def check_password_hash(pwhash: str, password: str) -> bool:\n        \"\"\"Securely check that the given stored password hash, previously generated using\n        :func:`generate_password_hash`, matches the given password.\n    \n        Methods may be deprecated and removed if they are no longer considered secure. To\n        migrate old hashes, you may generate a new hash when checking an old hash, or you\n        may contact users with a link to reset their password.\n    \n        :param pwhash: The hashed password.\n        :param password: The plaintext password.\n    \n        .. versionchanged:: 2.3\n            All plain hashes are deprecated and will not be supported in Werkzeug 3.0.\n        \"\"\"\n        try:\n>           method, salt, hashval = pwhash.split(\"$\", 2)\nE           TypeError: cannot unpack non-iterable Mock object\n\n/root/.cache/pypoetry/virtualenvs/knowledge-base-backend-ZFraIDiu-py3.12/lib/python3.12/site-packages/werkzeug/security.py:127: TypeError",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: self = <test_auth_service.TestAuthService.TestAuthenticate object at 0x736d06ff03e0>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e177d0>\nmock_user_repository = <Mock id='126912104069120'>\n\n    def test_authenticate_empty_credentials(self, auth_service, mock_user_repository):\n        \"\"\"测试空凭据的情况\"\"\"\n        # Act & Assert\n        with pytest.raises(AuthenticationError):\n>           auth_service.authenticate(\"\", \"\")\n\n../../tests/unit/backend/test_auth_service.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:152: in _verify_password\n    return check_password_hash(password_hash, password)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npwhash = <Mock name='mock.find_by_username().password_hash' id='126912104068880'>\npassword = ''\n\n    def check_password_hash(pwhash: str, password: str) -> bool:\n        \"\"\"Securely check that the given stored password hash, previously generated using\n        :func:`generate_password_hash`, matches the given password.\n    \n        Methods may be deprecated and removed if they are no longer considered secure. To\n        migrate old hashes, you may generate a new hash when checking an old hash, or you\n        may contact users with a link to reset their password.\n    \n        :param pwhash: The hashed password.\n        :param password: The plaintext password.\n    \n        .. versionchanged:: 2.3\n            All plain hashes are deprecated and will not be supported in Werkzeug 3.0.\n        \"\"\"\n        try:\n>           method, salt, hashval = pwhash.split(\"$\", 2)\nE           TypeError: cannot unpack non-iterable Mock object\n\n/root/.cache/pypoetry/virtualenvs/knowledge-base-backend-ZFraIDiu-py3.12/lib/python3.12/site-packages/werkzeug/security.py:127: TypeError"
    },
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_sql_injection_attempt",
      "description": "测试SQL注入尝试",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_sql_injection_attempt",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:17.694662",
      "end_time": "2025-10-06T23:13:17.695482",
      "duration": 0.0008077621459960938,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_special_characters",
      "description": "测试特殊字符处理",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_special_characters",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:17.696576",
      "end_time": "2025-10-06T23:13:17.968594",
      "duration": 0.2720019817352295,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestRegister::test_register_success",
      "description": "测试成功注册",
      "module": "test_auth_service",
      "class": "TestRegister",
      "function": "test_register_success",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:17.969461",
      "end_time": "2025-10-06T23:13:18.061199",
      "duration": 0.09172534942626953,
      "status": "failed",
      "error_message": "self = <test_auth_service.TestAuthService.TestRegister object at 0x736d08605430>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e17b30>\nmock_user_repository = <Mock id='126912104060048'>\n\n    def test_register_success(self, auth_service, mock_user_repository):\n        \"\"\"测试成功注册\"\"\"\n        # Arrange\n        mock_user_repository.exists_by_username.return_value = False\n        mock_user_repository.exists_by_email.return_value = False\n        mock_user_repository.save.return_value = None\n    \n        # Act\n        result = auth_service.register(\"newuser\", \"newuser@test.com\", \"123456\")\n    \n        # Assert\n>       assert result.username == \"newuser\"\nE       AttributeError: 'NoneType' object has no attribute 'username'\n\n../../tests/unit/backend/test_auth_service.py:170: AttributeError",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: self = <test_auth_service.TestAuthService.TestRegister object at 0x736d08605430>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e17b30>\nmock_user_repository = <Mock id='126912104060048'>\n\n    def test_register_success(self, auth_service, mock_user_repository):\n        \"\"\"测试成功注册\"\"\"\n        # Arrange\n        mock_user_repository.exists_by_username.return_value = False\n        mock_user_repository.exists_by_email.return_value = False\n        mock_user_repository.save.return_value = None\n    \n        # Act\n        result = auth_service.register(\"newuser\", \"newuser@test.com\", \"123456\")\n    \n        # Assert\n>       assert result.username == \"newuser\"\nE       AttributeError: 'NoneType' object has no attribute 'username'\n\n../../tests/unit/backend/test_auth_service.py:170: AttributeError"
    },
    {
      "test_id": "test_auth_service::TestRegister::test_register_username_exists",
      "description": "测试用户名已存在",
      "module": "test_auth_service",
      "class": "TestRegister",
      "function": "test_register_username_exists",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:18.065755",
      "end_time": "2025-10-06T23:13:18.066582",
      "duration": 0.0008139610290527344,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestRegister::test_register_email_exists",
      "description": "测试邮箱已存在",
      "module": "test_auth_service",
      "class": "TestRegister",
      "function": "test_register_email_exists",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:18.067267",
      "end_time": "2025-10-06T23:13:18.067926",
      "duration": 0.0006496906280517578,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestRegister::test_register_invalid_email_format",
      "description": "测试无效邮箱格式",
      "module": "test_auth_service",
      "class": "TestRegister",
      "function": "test_register_invalid_email_format",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:18.068630",
      "end_time": "2025-10-06T23:13:18.157335",
      "duration": 0.08869290351867676,
      "status": "failed",
      "error_message": "self = <test_auth_service.TestAuthService.TestRegister object at 0x736d06ff1430>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e15a60>\nmock_user_repository = <Mock id='126912104061248'>\n\n    def test_register_invalid_email_format(self, auth_service, mock_user_repository):\n        \"\"\"测试无效邮箱格式\"\"\"\n        # Arrange\n        mock_user_repository.exists_by_username.return_value = False\n        mock_user_repository.exists_by_email.return_value = False\n    \n        # Act & Assert\n>       with pytest.raises(AuthenticationError):\nE       Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>\n\n../../tests/unit/backend/test_auth_service.py:205: Failed",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: self = <test_auth_service.TestAuthService.TestRegister object at 0x736d06ff1430>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e15a60>\nmock_user_repository = <Mock id='126912104061248'>\n\n    def test_register_invalid_email_format(self, auth_service, mock_user_repository):\n        \"\"\"测试无效邮箱格式\"\"\"\n        # Arrange\n        mock_user_repository.exists_by_username.return_value = False\n        mock_user_repository.exists_by_email.return_value = False\n    \n        # Act & Assert\n>       with pytest.raises(AuthenticationError):\nE       Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>\n\n../../tests/unit/backend/test_auth_service.py:205: Failed"
    },
    {
      "test_id": "test_auth_service::TestRegister::test_register_weak_password",
      "description": "测试弱密码",
      "module": "test_auth_service",
      "class": "TestRegister",
      "function": "test_register_weak_password",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:18.158302",
      "end_time": "2025-10-06T23:13:18.248047",
      "duration": 0.08973264694213867,
      "status": "failed",
      "error_message": "self = <test_auth_service.TestAuthService.TestRegister object at 0x736d06ff1700>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e15460>\nmock_user_repository = <Mock id='126912104058464'>\n\n    def test_register_weak_password(self, auth_service, mock_user_repository):\n        \"\"\"测试弱密码\"\"\"\n        # Arrange\n        mock_user_repository.exists_by_username.return_value = False\n        mock_user_repository.exists_by_email.return_value = False\n    \n        # Act & Assert\n>       with pytest.raises(AuthenticationError):\nE       Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>\n\n../../tests/unit/backend/test_auth_service.py:215: Failed",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: self = <test_auth_service.TestAuthService.TestRegister object at 0x736d06ff1700>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e15460>\nmock_user_repository = <Mock id='126912104058464'>\n\n    def test_register_weak_password(self, auth_service, mock_user_repository):\n        \"\"\"测试弱密码\"\"\"\n        # Arrange\n        mock_user_repository.exists_by_username.return_value = False\n        mock_user_repository.exists_by_email.return_value = False\n    \n        # Act & Assert\n>       with pytest.raises(AuthenticationError):\nE       Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>\n\n../../tests/unit/backend/test_auth_service.py:215: Failed"
    },
    {
      "test_id": "test_auth_service::TestRegister::test_register_admin_role",
      "description": "测试注册管理员角色",
      "module": "test_auth_service",
      "class": "TestRegister",
      "function": "test_register_admin_role",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:18.249052",
      "end_time": "2025-10-06T23:13:18.339843",
      "duration": 0.09077882766723633,
      "status": "failed",
      "error_message": "self = <test_auth_service.TestAuthService.TestRegister object at 0x736d06ff19d0>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e81d90>\nmock_user_repository = <Mock id='126912104512448'>\n\n    def test_register_admin_role(self, auth_service, mock_user_repository):\n        \"\"\"测试注册管理员角色\"\"\"\n        # Arrange\n        mock_user_repository.exists_by_username.return_value = False\n        mock_user_repository.exists_by_email.return_value = False\n        mock_user_repository.save.return_value = None\n    \n        # Act\n        result = auth_service.register(\"admin\", \"admin@test.com\", \"123456\", \"admin\")\n    \n        # Assert\n>       assert result.role == \"admin\"\nE       AttributeError: 'NoneType' object has no attribute 'role'\n\n../../tests/unit/backend/test_auth_service.py:229: AttributeError",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: self = <test_auth_service.TestAuthService.TestRegister object at 0x736d06ff19d0>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e81d90>\nmock_user_repository = <Mock id='126912104512448'>\n\n    def test_register_admin_role(self, auth_service, mock_user_repository):\n        \"\"\"测试注册管理员角色\"\"\"\n        # Arrange\n        mock_user_repository.exists_by_username.return_value = False\n        mock_user_repository.exists_by_email.return_value = False\n        mock_user_repository.save.return_value = None\n    \n        # Act\n        result = auth_service.register(\"admin\", \"admin@test.com\", \"123456\", \"admin\")\n    \n        # Assert\n>       assert result.role == \"admin\"\nE       AttributeError: 'NoneType' object has no attribute 'role'\n\n../../tests/unit/backend/test_auth_service.py:229: AttributeError"
    },
    {
      "test_id": "test_auth_service::TestRefreshToken::test_refresh_token_success",
      "description": "测试成功刷新令牌",
      "module": "test_auth_service",
      "class": "TestRefreshToken",
      "function": "test_refresh_token_success",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:18.340838",
      "end_time": "2025-10-06T23:13:18.434473",
      "duration": 0.09362316131591797,
      "status": "failed",
      "error_message": "self = <test_auth_service.TestAuthService.TestRefreshToken object at 0x736d06f5f5c0>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e81250>\nmock_user_repository = <Mock id='126912104501792'>\nsample_user = User(id='1', username='admin', email='admin@test.com', password_hash='scrypt:32768:8:1$CmCZgvHGSzLctofT$88885b5db6e88e...d_at=datetime.datetime(2025, 10, 6, 23, 13, 18, 426519), updated_at=datetime.datetime(2025, 10, 6, 23, 13, 18, 426529))\n\n    def test_refresh_token_success(self, auth_service, mock_user_repository, sample_user):\n        \"\"\"测试成功刷新令牌\"\"\"\n        # Arrange\n        mock_user_repository.find_by_id.return_value = sample_user\n    \n        # Act\n        with patch('application.services.auth_service.decode_token') as mock_decode, \\\n             patch('application.services.auth_service.create_access_token') as mock_access_token, \\\n             patch('application.services.auth_service.create_refresh_token') as mock_refresh_token:\n    \n            mock_decode.return_value = {'sub': '1'}\n            mock_access_token.return_value = \"new_access_token\"\n            mock_refresh_token.return_value = \"new_refresh_token\"\n    \n            result = auth_service.refresh_token(\"valid_refresh_token\")\n    \n        # Assert\n        assert result['access_token'] == \"new_access_token\"\n>       assert result['refresh_token'] == \"new_refresh_token\"\nE       KeyError: 'refresh_token'\n\n../../tests/unit/backend/test_auth_service.py:253: KeyError",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: self = <test_auth_service.TestAuthService.TestRefreshToken object at 0x736d06f5f5c0>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e81250>\nmock_user_repository = <Mock id='126912104501792'>\nsample_user = User(id='1', username='admin', email='admin@test.com', password_hash='scrypt:32768:8:1$CmCZgvHGSzLctofT$88885b5db6e88e...d_at=datetime.datetime(2025, 10, 6, 23, 13, 18, 426519), updated_at=datetime.datetime(2025, 10, 6, 23, 13, 18, 426529))\n\n    def test_refresh_token_success(self, auth_service, mock_user_repository, sample_user):\n        \"\"\"测试成功刷新令牌\"\"\"\n        # Arrange\n        mock_user_repository.find_by_id.return_value = sample_user\n    \n        # Act\n        with patch('application.services.auth_service.decode_token') as mock_decode, \\\n             patch('application.services.auth_service.create_access_token') as mock_access_token, \\\n             patch('application.services.auth_service.create_refresh_token') as mock_refresh_token:\n    \n            mock_decode.return_value = {'sub': '1'}\n            mock_access_token.return_value = \"new_access_token\"\n            mock_refresh_token.return_value = \"new_refresh_token\"\n    \n            result = auth_service.refresh_token(\"valid_refresh_token\")\n    \n        # Assert\n        assert result['access_token'] == \"new_access_token\"\n>       assert result['refresh_token'] == \"new_refresh_token\"\nE       KeyError: 'refresh_token'\n\n../../tests/unit/backend/test_auth_service.py:253: KeyError"
    },
    {
      "test_id": "test_auth_service::TestRefreshToken::test_refresh_token_invalid_token",
      "description": "测试无效刷新令牌",
      "module": "test_auth_service",
      "class": "TestRefreshToken",
      "function": "test_refresh_token_invalid_token",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:18.435501",
      "end_time": "2025-10-06T23:13:18.436324",
      "duration": 0.0008111000061035156,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestRefreshToken::test_refresh_token_user_not_found",
      "description": "测试用户不存在",
      "module": "test_auth_service",
      "class": "TestRefreshToken",
      "function": "test_refresh_token_user_not_found",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:18.437045",
      "end_time": "2025-10-06T23:13:18.444500",
      "duration": 0.007439613342285156,
      "status": "failed",
      "error_message": "self = <test_auth_service.TestAuthService.TestRefreshToken object at 0x736d06ff1d90>\nauth_service = <application.services.auth_service.AuthService object at 0x736d086049b0>\nmock_user_repository = <Mock id='126912129140544'>\n\n    def test_refresh_token_user_not_found(self, auth_service, mock_user_repository):\n        \"\"\"测试用户不存在\"\"\"\n        # Arrange\n        mock_user_repository.find_by_id.return_value = None\n    \n        # Act & Assert\n        with patch('application.services.auth_service.decode_token') as mock_decode:\n            mock_decode.return_value = {'sub': '999'}\n    \n            with pytest.raises(AuthenticationError) as exc_info:\n                auth_service.refresh_token(\"valid_token\")\n    \n>           assert str(exc_info.value) == \"用户不存在\"\nE           AssertionError: assert '令牌刷新失败' == '用户不存在'\nE             - 用户不存在\nE             + 令牌刷新失败\n\n../../tests/unit/backend/test_auth_service.py:276: AssertionError",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: self = <test_auth_service.TestAuthService.TestRefreshToken object at 0x736d06ff1d90>\nauth_service = <application.services.auth_service.AuthService object at 0x736d086049b0>\nmock_user_repository = <Mock id='126912129140544'>\n\n    def test_refresh_token_user_not_found(self, auth_service, mock_user_repository):\n        \"\"\"测试用户不存在\"\"\"\n        # Arrange\n        mock_user_repository.find_by_id.return_value = None\n    \n        # Act & Assert\n        with patch('application.services.auth_service.decode_token') as mock_decode:\n            mock_decode.return_value = {'sub': '999'}\n    \n            with pytest.raises(AuthenticationError) as exc_info:\n                auth_service.refresh_token(\"valid_token\")\n    \n>           assert str(exc_info.value) == \"用户不存在\"\nE           AssertionError: assert '令牌刷新失败' == '用户不存在'\nE             - 用户不存在\nE             + 令牌刷新失败\n\n../../tests/unit/backend/test_auth_service.py:276: AssertionError"
    },
    {
      "test_id": "test_auth_service::TestChangePassword::test_change_password_success",
      "description": "测试成功修改密码",
      "module": "test_auth_service",
      "class": "TestChangePassword",
      "function": "test_change_password_success",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:18.445467",
      "end_time": "2025-10-06T23:13:18.699881",
      "duration": 0.25440287590026855,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestChangePassword::test_change_password_user_not_found",
      "description": "测试用户不存在",
      "module": "test_auth_service",
      "class": "TestChangePassword",
      "function": "test_change_password_user_not_found",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:18.701471",
      "end_time": "2025-10-06T23:13:18.702500",
      "duration": 0.0010056495666503906,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestChangePassword::test_change_password_wrong_old_password",
      "description": "测试旧密码错误",
      "module": "test_auth_service",
      "class": "TestChangePassword",
      "function": "test_change_password_wrong_old_password",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:18.703938",
      "end_time": "2025-10-06T23:13:18.887815",
      "duration": 0.18386411666870117,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestChangePassword::test_change_password_same_as_old",
      "description": "测试新密码与旧密码相同",
      "module": "test_auth_service",
      "class": "TestChangePassword",
      "function": "test_change_password_same_as_old",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:18.888668",
      "end_time": "2025-10-06T23:13:19.058027",
      "duration": 0.16934585571289062,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestResetPassword::test_reset_password_success",
      "description": "测试成功重置密码",
      "module": "test_auth_service",
      "class": "TestResetPassword",
      "function": "test_reset_password_success",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:19.058875",
      "end_time": "2025-10-06T23:13:19.233503",
      "duration": 0.17461585998535156,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestResetPassword::test_reset_password_user_not_found",
      "description": "测试用户不存在",
      "module": "test_auth_service",
      "class": "TestResetPassword",
      "function": "test_reset_password_user_not_found",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:19.234441",
      "end_time": "2025-10-06T23:13:19.235221",
      "duration": 0.0007688999176025391,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestPasswordSecurity::test_password_hashing",
      "description": "测试密码哈希",
      "module": "test_auth_service",
      "class": "TestPasswordSecurity",
      "function": "test_password_hashing",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:19.236096",
      "end_time": "2025-10-06T23:13:19.406196",
      "duration": 0.1700887680053711,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestPasswordSecurity::test_password_verification",
      "description": "测试密码验证",
      "module": "test_auth_service",
      "class": "TestPasswordSecurity",
      "function": "test_password_verification",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:19.407098",
      "end_time": "2025-10-06T23:13:19.662426",
      "duration": 0.25531435012817383,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestPasswordSecurity::test_password_salt_uniqueness",
      "description": "测试密码盐值唯一性",
      "module": "test_auth_service",
      "class": "TestPasswordSecurity",
      "function": "test_password_salt_uniqueness",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:19.663216",
      "end_time": "2025-10-06T23:13:19.989219",
      "duration": 0.3259897232055664,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestInputValidation::test_validate_empty_inputs",
      "description": "测试空输入验证",
      "module": "test_auth_service",
      "class": "TestInputValidation",
      "function": "test_validate_empty_inputs",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:19.990107",
      "end_time": "2025-10-06T23:13:20.002430",
      "duration": 0.012310504913330078,
      "status": "failed",
      "error_message": "self = <test_auth_service.TestAuthService.TestInputValidation object at 0x736d06ff3980>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e16f00>\nmock_user_repository = <Mock id='126912104066768'>\n\n    def test_validate_empty_inputs(self, auth_service, mock_user_repository):\n        \"\"\"测试空输入验证\"\"\"\n        with pytest.raises(AuthenticationError):\n>           auth_service.authenticate(\"\", \"password\")\n\n../../tests/unit/backend/test_auth_service.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:152: in _verify_password\n    return check_password_hash(password_hash, password)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npwhash = <Mock name='mock.find_by_username().password_hash' id='126912104067488'>\npassword = 'password'\n\n    def check_password_hash(pwhash: str, password: str) -> bool:\n        \"\"\"Securely check that the given stored password hash, previously generated using\n        :func:`generate_password_hash`, matches the given password.\n    \n        Methods may be deprecated and removed if they are no longer considered secure. To\n        migrate old hashes, you may generate a new hash when checking an old hash, or you\n        may contact users with a link to reset their password.\n    \n        :param pwhash: The hashed password.\n        :param password: The plaintext password.\n    \n        .. versionchanged:: 2.3\n            All plain hashes are deprecated and will not be supported in Werkzeug 3.0.\n        \"\"\"\n        try:\n>           method, salt, hashval = pwhash.split(\"$\", 2)\nE           TypeError: cannot unpack non-iterable Mock object\n\n/root/.cache/pypoetry/virtualenvs/knowledge-base-backend-ZFraIDiu-py3.12/lib/python3.12/site-packages/werkzeug/security.py:127: TypeError",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: self = <test_auth_service.TestAuthService.TestInputValidation object at 0x736d06ff3980>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e16f00>\nmock_user_repository = <Mock id='126912104066768'>\n\n    def test_validate_empty_inputs(self, auth_service, mock_user_repository):\n        \"\"\"测试空输入验证\"\"\"\n        with pytest.raises(AuthenticationError):\n>           auth_service.authenticate(\"\", \"password\")\n\n../../tests/unit/backend/test_auth_service.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:152: in _verify_password\n    return check_password_hash(password_hash, password)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npwhash = <Mock name='mock.find_by_username().password_hash' id='126912104067488'>\npassword = 'password'\n\n    def check_password_hash(pwhash: str, password: str) -> bool:\n        \"\"\"Securely check that the given stored password hash, previously generated using\n        :func:`generate_password_hash`, matches the given password.\n    \n        Methods may be deprecated and removed if they are no longer considered secure. To\n        migrate old hashes, you may generate a new hash when checking an old hash, or you\n        may contact users with a link to reset their password.\n    \n        :param pwhash: The hashed password.\n        :param password: The plaintext password.\n    \n        .. versionchanged:: 2.3\n            All plain hashes are deprecated and will not be supported in Werkzeug 3.0.\n        \"\"\"\n        try:\n>           method, salt, hashval = pwhash.split(\"$\", 2)\nE           TypeError: cannot unpack non-iterable Mock object\n\n/root/.cache/pypoetry/virtualenvs/knowledge-base-backend-ZFraIDiu-py3.12/lib/python3.12/site-packages/werkzeug/security.py:127: TypeError"
    },
    {
      "test_id": "test_auth_service::TestInputValidation::test_validate_none_inputs",
      "description": "测试None输入验证",
      "module": "test_auth_service",
      "class": "TestInputValidation",
      "function": "test_validate_none_inputs",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:20.004009",
      "end_time": "2025-10-06T23:13:20.019533",
      "duration": 0.015501022338867188,
      "status": "failed",
      "error_message": "self = <test_auth_service.TestAuthService.TestInputValidation object at 0x736d06ff3c50>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06eb2f60>\nmock_user_repository = <Mock id='126912104704880'>\n\n    def test_validate_none_inputs(self, auth_service, mock_user_repository):\n        \"\"\"测试None输入验证\"\"\"\n        with pytest.raises(AuthenticationError):\n>           auth_service.authenticate(None, \"password\")\n\n../../tests/unit/backend/test_auth_service.py:402: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:152: in _verify_password\n    return check_password_hash(password_hash, password)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npwhash = <Mock name='mock.find_by_username().password_hash' id='126912104707424'>\npassword = 'password'\n\n    def check_password_hash(pwhash: str, password: str) -> bool:\n        \"\"\"Securely check that the given stored password hash, previously generated using\n        :func:`generate_password_hash`, matches the given password.\n    \n        Methods may be deprecated and removed if they are no longer considered secure. To\n        migrate old hashes, you may generate a new hash when checking an old hash, or you\n        may contact users with a link to reset their password.\n    \n        :param pwhash: The hashed password.\n        :param password: The plaintext password.\n    \n        .. versionchanged:: 2.3\n            All plain hashes are deprecated and will not be supported in Werkzeug 3.0.\n        \"\"\"\n        try:\n>           method, salt, hashval = pwhash.split(\"$\", 2)\nE           TypeError: cannot unpack non-iterable Mock object\n\n/root/.cache/pypoetry/virtualenvs/knowledge-base-backend-ZFraIDiu-py3.12/lib/python3.12/site-packages/werkzeug/security.py:127: TypeError",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: self = <test_auth_service.TestAuthService.TestInputValidation object at 0x736d06ff3c50>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06eb2f60>\nmock_user_repository = <Mock id='126912104704880'>\n\n    def test_validate_none_inputs(self, auth_service, mock_user_repository):\n        \"\"\"测试None输入验证\"\"\"\n        with pytest.raises(AuthenticationError):\n>           auth_service.authenticate(None, \"password\")\n\n../../tests/unit/backend/test_auth_service.py:402: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:152: in _verify_password\n    return check_password_hash(password_hash, password)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npwhash = <Mock name='mock.find_by_username().password_hash' id='126912104707424'>\npassword = 'password'\n\n    def check_password_hash(pwhash: str, password: str) -> bool:\n        \"\"\"Securely check that the given stored password hash, previously generated using\n        :func:`generate_password_hash`, matches the given password.\n    \n        Methods may be deprecated and removed if they are no longer considered secure. To\n        migrate old hashes, you may generate a new hash when checking an old hash, or you\n        may contact users with a link to reset their password.\n    \n        :param pwhash: The hashed password.\n        :param password: The plaintext password.\n    \n        .. versionchanged:: 2.3\n            All plain hashes are deprecated and will not be supported in Werkzeug 3.0.\n        \"\"\"\n        try:\n>           method, salt, hashval = pwhash.split(\"$\", 2)\nE           TypeError: cannot unpack non-iterable Mock object\n\n/root/.cache/pypoetry/virtualenvs/knowledge-base-backend-ZFraIDiu-py3.12/lib/python3.12/site-packages/werkzeug/security.py:127: TypeError"
    },
    {
      "test_id": "test_auth_service::TestInputValidation::test_validate_whitespace_inputs",
      "description": "测试空白字符输入验证",
      "module": "test_auth_service",
      "class": "TestInputValidation",
      "function": "test_validate_whitespace_inputs",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-06T23:13:20.022371",
      "end_time": "2025-10-06T23:13:20.034418",
      "duration": 0.012002229690551758,
      "status": "failed",
      "error_message": "self = <test_auth_service.TestAuthService.TestInputValidation object at 0x736d06ff3f20>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06eb24b0>\nmock_user_repository = <Mock id='126912104702384'>\n\n    def test_validate_whitespace_inputs(self, auth_service, mock_user_repository):\n        \"\"\"测试空白字符输入验证\"\"\"\n        with pytest.raises(AuthenticationError):\n>           auth_service.authenticate(\"   \", \"password\")\n\n../../tests/unit/backend/test_auth_service.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:152: in _verify_password\n    return check_password_hash(password_hash, password)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npwhash = <Mock name='mock.find_by_username().password_hash' id='126912104703440'>\npassword = 'password'\n\n    def check_password_hash(pwhash: str, password: str) -> bool:\n        \"\"\"Securely check that the given stored password hash, previously generated using\n        :func:`generate_password_hash`, matches the given password.\n    \n        Methods may be deprecated and removed if they are no longer considered secure. To\n        migrate old hashes, you may generate a new hash when checking an old hash, or you\n        may contact users with a link to reset their password.\n    \n        :param pwhash: The hashed password.\n        :param password: The plaintext password.\n    \n        .. versionchanged:: 2.3\n            All plain hashes are deprecated and will not be supported in Werkzeug 3.0.\n        \"\"\"\n        try:\n>           method, salt, hashval = pwhash.split(\"$\", 2)\nE           TypeError: cannot unpack non-iterable Mock object\n\n/root/.cache/pypoetry/virtualenvs/knowledge-base-backend-ZFraIDiu-py3.12/lib/python3.12/site-packages/werkzeug/security.py:127: TypeError",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: self = <test_auth_service.TestAuthService.TestInputValidation object at 0x736d06ff3f20>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06eb24b0>\nmock_user_repository = <Mock id='126912104702384'>\n\n    def test_validate_whitespace_inputs(self, auth_service, mock_user_repository):\n        \"\"\"测试空白字符输入验证\"\"\"\n        with pytest.raises(AuthenticationError):\n>           auth_service.authenticate(\"   \", \"password\")\n\n../../tests/unit/backend/test_auth_service.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:152: in _verify_password\n    return check_password_hash(password_hash, password)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npwhash = <Mock name='mock.find_by_username().password_hash' id='126912104703440'>\npassword = 'password'\n\n    def check_password_hash(pwhash: str, password: str) -> bool:\n        \"\"\"Securely check that the given stored password hash, previously generated using\n        :func:`generate_password_hash`, matches the given password.\n    \n        Methods may be deprecated and removed if they are no longer considered secure. To\n        migrate old hashes, you may generate a new hash when checking an old hash, or you\n        may contact users with a link to reset their password.\n    \n        :param pwhash: The hashed password.\n        :param password: The plaintext password.\n    \n        .. versionchanged:: 2.3\n            All plain hashes are deprecated and will not be supported in Werkzeug 3.0.\n        \"\"\"\n        try:\n>           method, salt, hashval = pwhash.split(\"$\", 2)\nE           TypeError: cannot unpack non-iterable Mock object\n\n/root/.cache/pypoetry/virtualenvs/knowledge-base-backend-ZFraIDiu-py3.12/lib/python3.12/site-packages/werkzeug/security.py:127: TypeError"
    },
    {
      "test_id": "test_auth_service::TestSecurityFeatures::test_timing_attack_resistance",
      "description": "测试时序攻击防护",
      "module": "test_auth_service",
      "class": "TestSecurityFeatures",
      "function": "test_timing_attack_resistance",
      "markers": [
        "security"
      ],
      "start_time": "2025-10-06T23:13:20.035663",
      "end_time": "2025-10-06T23:13:20.204991",
      "duration": 0.1693115234375,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestSecurityFeatures::test_password_complexity_validation",
      "description": "测试密码复杂度验证",
      "module": "test_auth_service",
      "class": "TestSecurityFeatures",
      "function": "test_password_complexity_validation",
      "markers": [
        "security"
      ],
      "start_time": "2025-10-06T23:13:20.206378",
      "end_time": "2025-10-06T23:13:20.319393",
      "duration": 0.11299395561218262,
      "status": "failed",
      "error_message": "self = <test_auth_service.TestAuthService.TestSecurityFeatures object at 0x736d075a5af0>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e6c170>\nmock_user_repository = <Mock id='126912104415552'>\n\n    def test_password_complexity_validation(self, auth_service, mock_user_repository):\n        \"\"\"测试密码复杂度验证\"\"\"\n        mock_user_repository.exists_by_username.return_value = False\n        mock_user_repository.exists_by_email.return_value = False\n    \n        # 测试各种弱密码\n        weak_passwords = [\n            \"123\",          # 太短\n            \"password\",     # 常见密码\n            \"12345678\",     # 纯数字\n            \"abcdefgh\",     # 纯字母\n        ]\n    \n        for weak_password in weak_passwords:\n>           with pytest.raises(AuthenticationError):\nE           Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>\n\n../../tests/unit/backend/test_auth_service.py:466: Failed",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: self = <test_auth_service.TestAuthService.TestSecurityFeatures object at 0x736d075a5af0>\nauth_service = <application.services.auth_service.AuthService object at 0x736d06e6c170>\nmock_user_repository = <Mock id='126912104415552'>\n\n    def test_password_complexity_validation(self, auth_service, mock_user_repository):\n        \"\"\"测试密码复杂度验证\"\"\"\n        mock_user_repository.exists_by_username.return_value = False\n        mock_user_repository.exists_by_email.return_value = False\n    \n        # 测试各种弱密码\n        weak_passwords = [\n            \"123\",          # 太短\n            \"password\",     # 常见密码\n            \"12345678\",     # 纯数字\n            \"abcdefgh\",     # 纯字母\n        ]\n    \n        for weak_password in weak_passwords:\n>           with pytest.raises(AuthenticationError):\nE           Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>\n\n../../tests/unit/backend/test_auth_service.py:466: Failed"
    },
    {
      "test_id": "test_auth_service::TestSecurityFeatures::test_xss_prevention_in_error_messages",
      "description": "测试错误消息中的XSS防护",
      "module": "test_auth_service",
      "class": "TestSecurityFeatures",
      "function": "test_xss_prevention_in_error_messages",
      "markers": [
        "security"
      ],
      "start_time": "2025-10-06T23:13:20.320524",
      "end_time": "2025-10-06T23:13:20.321362",
      "duration": 0.0008270740509033203,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    }
  ],
  "environment_info": {
    "python_version": "3.12.3 (main, Aug 14 2025, 17:47:21) [GCC 13.3.0]",
    "pytest_version": "7.4.4",
    "operating_system": "posix",
    "frontend_url": "http://localhost:3000",
    "backend_url": "http://localhost:5000"
  },
  "compliance_info": {
    "security_standards": "符合政府安全标准要求",
    "automation_framework": "适用于自动化测试框架",
    "manual_intervention": "最小化人工干预"
  }
}
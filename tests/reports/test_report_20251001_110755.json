{
  "test_execution_summary": {
    "start_time": "2025-10-01T11:07:51.246370",
    "end_time": "2025-10-01T11:07:55.740756",
    "total_duration_seconds": 4.494386,
    "total_test_cases": 31,
    "passed": 9,
    "failed": 22,
    "skipped": 0,
    "errors": 0,
    "success_rate": 29.03225806451613
  },
  "test_cases": [
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_success_with_username",
      "description": "测试使用用户名成功认证",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_success_with_username",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:51.246742",
      "end_time": "2025-10-01T11:07:51.427759",
      "duration": 0.18100214004516602,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:51: in test_authenticate_success_with_username\n    with patch('src.backend.application.services.auth_service.create_access_token') as mock_access_token, \\\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.12/pkgutil.py:528: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'src' has no attribute 'backend'",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:51: in test_authenticate_success_with_username\n    with patch('src.backend.application.services.auth_service.create_access_token') as mock_access_token, \\\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.12/pkgutil.py:528: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'src' has no attribute 'backend'"
    },
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_success_with_email",
      "description": "测试使用邮箱成功认证",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_success_with_email",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:51.428877",
      "end_time": "2025-10-01T11:07:51.560254",
      "duration": 0.1313619613647461,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:72: in test_authenticate_success_with_email\n    with patch('src.backend.application.services.auth_service.create_access_token') as mock_access_token, \\\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.12/pkgutil.py:528: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'src' has no attribute 'backend'",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:72: in test_authenticate_success_with_email\n    with patch('src.backend.application.services.auth_service.create_access_token') as mock_access_token, \\\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.12/pkgutil.py:528: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'src' has no attribute 'backend'"
    },
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_user_not_found",
      "description": "测试用户不存在的情况",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_user_not_found",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:51.561144",
      "end_time": "2025-10-01T11:07:51.561943",
      "duration": 0.0007905960083007812,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_wrong_password",
      "description": "测试密码错误的情况",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_wrong_password",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:51.562667",
      "end_time": "2025-10-01T11:07:51.740510",
      "duration": 0.17783308029174805,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_empty_credentials",
      "description": "测试空凭据的情况",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_empty_credentials",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:51.741408",
      "end_time": "2025-10-01T11:07:51.751748",
      "duration": 0.010329008102416992,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:111: in test_authenticate_empty_credentials\n    auth_service.authenticate(\"\", \"\")\napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:127: in check_password_hash\n    method, salt, hashval = pwhash.split(\"$\", 2)\nE   TypeError: cannot unpack non-iterable Mock object",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:111: in test_authenticate_empty_credentials\n    auth_service.authenticate(\"\", \"\")\napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:127: in check_password_hash\n    method, salt, hashval = pwhash.split(\"$\", 2)\nE   TypeError: cannot unpack non-iterable Mock object"
    },
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_sql_injection_attempt",
      "description": "测试SQL注入尝试",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_sql_injection_attempt",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:51.752540",
      "end_time": "2025-10-01T11:07:51.753246",
      "duration": 0.0006961822509765625,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestAuthenticate::test_authenticate_special_characters",
      "description": "测试特殊字符处理",
      "module": "test_auth_service",
      "class": "TestAuthenticate",
      "function": "test_authenticate_special_characters",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:51.753997",
      "end_time": "2025-10-01T11:07:51.965430",
      "duration": 0.21142244338989258,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:145: in test_authenticate_special_characters\n    with patch('src.backend.application.services.auth_service.create_access_token') as mock_access_token, \\\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.12/pkgutil.py:528: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'src' has no attribute 'backend'",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:145: in test_authenticate_special_characters\n    with patch('src.backend.application.services.auth_service.create_access_token') as mock_access_token, \\\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.12/pkgutil.py:528: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'src' has no attribute 'backend'"
    },
    {
      "test_id": "test_auth_service::TestRegister::test_register_success",
      "description": "测试成功注册",
      "module": "test_auth_service",
      "class": "TestRegister",
      "function": "test_register_success",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:51.966278",
      "end_time": "2025-10-01T11:07:52.192102",
      "duration": 0.2258133888244629,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:170: in test_register_success\n    assert result.username == \"newuser\"\nE   AttributeError: 'NoneType' object has no attribute 'username'",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:170: in test_register_success\n    assert result.username == \"newuser\"\nE   AttributeError: 'NoneType' object has no attribute 'username'"
    },
    {
      "test_id": "test_auth_service::TestRegister::test_register_username_exists",
      "description": "测试用户名已存在",
      "module": "test_auth_service",
      "class": "TestRegister",
      "function": "test_register_username_exists",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:52.193210",
      "end_time": "2025-10-01T11:07:52.193985",
      "duration": 0.0007612705230712891,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestRegister::test_register_email_exists",
      "description": "测试邮箱已存在",
      "module": "test_auth_service",
      "class": "TestRegister",
      "function": "test_register_email_exists",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:52.194775",
      "end_time": "2025-10-01T11:07:52.195484",
      "duration": 0.0006985664367675781,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestRegister::test_register_invalid_email_format",
      "description": "测试无效邮箱格式",
      "module": "test_auth_service",
      "class": "TestRegister",
      "function": "test_register_invalid_email_format",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:52.196128",
      "end_time": "2025-10-01T11:07:52.419234",
      "duration": 0.2230968475341797,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:205: in test_register_invalid_email_format\n    with pytest.raises(AuthenticationError):\nE   Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:205: in test_register_invalid_email_format\n    with pytest.raises(AuthenticationError):\nE   Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>"
    },
    {
      "test_id": "test_auth_service::TestRegister::test_register_weak_password",
      "description": "测试弱密码",
      "module": "test_auth_service",
      "class": "TestRegister",
      "function": "test_register_weak_password",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:52.419940",
      "end_time": "2025-10-01T11:07:52.657400",
      "duration": 0.23745083808898926,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:215: in test_register_weak_password\n    with pytest.raises(AuthenticationError):\nE   Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:215: in test_register_weak_password\n    with pytest.raises(AuthenticationError):\nE   Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>"
    },
    {
      "test_id": "test_auth_service::TestRegister::test_register_admin_role",
      "description": "测试注册管理员角色",
      "module": "test_auth_service",
      "class": "TestRegister",
      "function": "test_register_admin_role",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:52.658174",
      "end_time": "2025-10-01T11:07:52.883258",
      "duration": 0.22507452964782715,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:229: in test_register_admin_role\n    assert result.role == \"admin\"\nE   AttributeError: 'NoneType' object has no attribute 'role'",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:229: in test_register_admin_role\n    assert result.role == \"admin\"\nE   AttributeError: 'NoneType' object has no attribute 'role'"
    },
    {
      "test_id": "test_auth_service::TestRefreshToken::test_refresh_token_success",
      "description": "测试成功刷新令牌",
      "module": "test_auth_service",
      "class": "TestRefreshToken",
      "function": "test_refresh_token_success",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:52.884007",
      "end_time": "2025-10-01T11:07:53.006568",
      "duration": 0.12255191802978516,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:241: in test_refresh_token_success\n    with patch('src.backend.application.services.auth_service.decode_token') as mock_decode, \\\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.12/pkgutil.py:528: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'src' has no attribute 'backend'",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:241: in test_refresh_token_success\n    with patch('src.backend.application.services.auth_service.decode_token') as mock_decode, \\\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.12/pkgutil.py:528: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'src' has no attribute 'backend'"
    },
    {
      "test_id": "test_auth_service::TestRefreshToken::test_refresh_token_invalid_token",
      "description": "测试无效刷新令牌",
      "module": "test_auth_service",
      "class": "TestRefreshToken",
      "function": "test_refresh_token_invalid_token",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:53.007534",
      "end_time": "2025-10-01T11:07:53.045209",
      "duration": 0.03766322135925293,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:258: in test_refresh_token_invalid_token\n    with patch('src.backend.application.services.auth_service.decode_token') as mock_decode:\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.12/pkgutil.py:528: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'src' has no attribute 'backend'",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:258: in test_refresh_token_invalid_token\n    with patch('src.backend.application.services.auth_service.decode_token') as mock_decode:\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.12/pkgutil.py:528: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'src' has no attribute 'backend'"
    },
    {
      "test_id": "test_auth_service::TestRefreshToken::test_refresh_token_user_not_found",
      "description": "测试用户不存在",
      "module": "test_auth_service",
      "class": "TestRefreshToken",
      "function": "test_refresh_token_user_not_found",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:53.045988",
      "end_time": "2025-10-01T11:07:53.085789",
      "duration": 0.03979158401489258,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:270: in test_refresh_token_user_not_found\n    with patch('src.backend.application.services.auth_service.decode_token') as mock_decode:\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.12/pkgutil.py:528: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'src' has no attribute 'backend'",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:270: in test_refresh_token_user_not_found\n    with patch('src.backend.application.services.auth_service.decode_token') as mock_decode:\n/usr/lib/python3.12/unittest/mock.py:1442: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.12/pkgutil.py:528: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'src' has no attribute 'backend'"
    },
    {
      "test_id": "test_auth_service::TestChangePassword::test_change_password_success",
      "description": "测试成功修改密码",
      "module": "test_auth_service",
      "class": "TestChangePassword",
      "function": "test_change_password_success",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:53.086651",
      "end_time": "2025-10-01T11:07:53.501476",
      "duration": 0.41481494903564453,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:293: in test_change_password_success\n    mock_user_repository.save.assert_called_once()\n/usr/lib/python3.12/unittest/mock.py:923: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'save' to have been called once. Called 0 times.",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:293: in test_change_password_success\n    mock_user_repository.save.assert_called_once()\n/usr/lib/python3.12/unittest/mock.py:923: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'save' to have been called once. Called 0 times."
    },
    {
      "test_id": "test_auth_service::TestChangePassword::test_change_password_user_not_found",
      "description": "测试用户不存在",
      "module": "test_auth_service",
      "class": "TestChangePassword",
      "function": "test_change_password_user_not_found",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:53.502322",
      "end_time": "2025-10-01T11:07:53.502997",
      "duration": 0.0006647109985351562,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestChangePassword::test_change_password_wrong_old_password",
      "description": "测试旧密码错误",
      "module": "test_auth_service",
      "class": "TestChangePassword",
      "function": "test_change_password_wrong_old_password",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:53.503603",
      "end_time": "2025-10-01T11:07:53.677671",
      "duration": 0.17405986785888672,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:315: in test_change_password_wrong_old_password\n    assert str(exc_info.value) == \"旧密码错误\"\nE   AssertionError: assert '原密码错误' == '旧密码错误'\nE     - 旧密码错误\nE     ? ^\nE     + 原密码错误\nE     ? ^",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:315: in test_change_password_wrong_old_password\n    assert str(exc_info.value) == \"旧密码错误\"\nE   AssertionError: assert '原密码错误' == '旧密码错误'\nE     - 旧密码错误\nE     ? ^\nE     + 原密码错误\nE     ? ^"
    },
    {
      "test_id": "test_auth_service::TestChangePassword::test_change_password_same_as_old",
      "description": "测试新密码与旧密码相同",
      "module": "test_auth_service",
      "class": "TestChangePassword",
      "function": "test_change_password_same_as_old",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:53.679433",
      "end_time": "2025-10-01T11:07:54.060945",
      "duration": 0.3814976215362549,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:323: in test_change_password_same_as_old\n    with pytest.raises(AuthenticationError):\nE   Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:323: in test_change_password_same_as_old\n    with pytest.raises(AuthenticationError):\nE   Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>"
    },
    {
      "test_id": "test_auth_service::TestResetPassword::test_reset_password_success",
      "description": "测试成功重置密码",
      "module": "test_auth_service",
      "class": "TestResetPassword",
      "function": "test_reset_password_success",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:54.061653",
      "end_time": "2025-10-01T11:07:54.391120",
      "duration": 0.32945704460144043,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:341: in test_reset_password_success\n    mock_user_repository.save.assert_called_once()\n/usr/lib/python3.12/unittest/mock.py:923: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'save' to have been called once. Called 0 times.",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:341: in test_reset_password_success\n    mock_user_repository.save.assert_called_once()\n/usr/lib/python3.12/unittest/mock.py:923: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'save' to have been called once. Called 0 times."
    },
    {
      "test_id": "test_auth_service::TestResetPassword::test_reset_password_user_not_found",
      "description": "测试用户不存在",
      "module": "test_auth_service",
      "class": "TestResetPassword",
      "function": "test_reset_password_user_not_found",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:54.391998",
      "end_time": "2025-10-01T11:07:54.392627",
      "duration": 0.0006113052368164062,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestPasswordSecurity::test_password_hashing",
      "description": "测试密码哈希",
      "module": "test_auth_service",
      "class": "TestPasswordSecurity",
      "function": "test_password_hashing",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:54.393288",
      "end_time": "2025-10-01T11:07:54.617752",
      "duration": 0.2244558334350586,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:365: in test_password_hashing\n    assert auth_service._verify_password(password, hashed)\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:131: in check_password_hash\n    return hmac.compare_digest(_hash_internal(method, salt, password)[0], hashval)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:70: in _hash_internal\n    raise ValueError(f\"Invalid hash method '{method}'.\")\nE   ValueError: Invalid hash method ''.",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:365: in test_password_hashing\n    assert auth_service._verify_password(password, hashed)\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:131: in check_password_hash\n    return hmac.compare_digest(_hash_internal(method, salt, password)[0], hashval)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:70: in _hash_internal\n    raise ValueError(f\"Invalid hash method '{method}'.\")\nE   ValueError: Invalid hash method ''."
    },
    {
      "test_id": "test_auth_service::TestPasswordSecurity::test_password_verification",
      "description": "测试密码验证",
      "module": "test_auth_service",
      "class": "TestPasswordSecurity",
      "function": "test_password_verification",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:54.618570",
      "end_time": "2025-10-01T11:07:54.860593",
      "duration": 0.24201250076293945,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:373: in test_password_verification\n    assert auth_service._verify_password(password, hashed)\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:131: in check_password_hash\n    return hmac.compare_digest(_hash_internal(method, salt, password)[0], hashval)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:70: in _hash_internal\n    raise ValueError(f\"Invalid hash method '{method}'.\")\nE   ValueError: Invalid hash method ''.",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:373: in test_password_verification\n    assert auth_service._verify_password(password, hashed)\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:131: in check_password_hash\n    return hmac.compare_digest(_hash_internal(method, salt, password)[0], hashval)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:70: in _hash_internal\n    raise ValueError(f\"Invalid hash method '{method}'.\")\nE   ValueError: Invalid hash method ''."
    },
    {
      "test_id": "test_auth_service::TestPasswordSecurity::test_password_salt_uniqueness",
      "description": "测试密码盐值唯一性",
      "module": "test_auth_service",
      "class": "TestPasswordSecurity",
      "function": "test_password_salt_uniqueness",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:54.861597",
      "end_time": "2025-10-01T11:07:55.296092",
      "duration": 0.4344823360443115,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:384: in test_password_salt_uniqueness\n    assert auth_service._verify_password(password, hash1)\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:131: in check_password_hash\n    return hmac.compare_digest(_hash_internal(method, salt, password)[0], hashval)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:70: in _hash_internal\n    raise ValueError(f\"Invalid hash method '{method}'.\")\nE   ValueError: Invalid hash method ''.",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:384: in test_password_salt_uniqueness\n    assert auth_service._verify_password(password, hash1)\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:131: in check_password_hash\n    return hmac.compare_digest(_hash_internal(method, salt, password)[0], hashval)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:70: in _hash_internal\n    raise ValueError(f\"Invalid hash method '{method}'.\")\nE   ValueError: Invalid hash method ''."
    },
    {
      "test_id": "test_auth_service::TestInputValidation::test_validate_empty_inputs",
      "description": "测试空输入验证",
      "module": "test_auth_service",
      "class": "TestInputValidation",
      "function": "test_validate_empty_inputs",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:55.297422",
      "end_time": "2025-10-01T11:07:55.307047",
      "duration": 0.009612798690795898,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:394: in test_validate_empty_inputs\n    auth_service.authenticate(\"\", \"password\")\napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:127: in check_password_hash\n    method, salt, hashval = pwhash.split(\"$\", 2)\nE   TypeError: cannot unpack non-iterable Mock object",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:394: in test_validate_empty_inputs\n    auth_service.authenticate(\"\", \"password\")\napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:127: in check_password_hash\n    method, salt, hashval = pwhash.split(\"$\", 2)\nE   TypeError: cannot unpack non-iterable Mock object"
    },
    {
      "test_id": "test_auth_service::TestInputValidation::test_validate_none_inputs",
      "description": "测试None输入验证",
      "module": "test_auth_service",
      "class": "TestInputValidation",
      "function": "test_validate_none_inputs",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:55.308024",
      "end_time": "2025-10-01T11:07:55.320530",
      "duration": 0.012486457824707031,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:402: in test_validate_none_inputs\n    auth_service.authenticate(None, \"password\")\napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:127: in check_password_hash\n    method, salt, hashval = pwhash.split(\"$\", 2)\nE   TypeError: cannot unpack non-iterable Mock object",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:402: in test_validate_none_inputs\n    auth_service.authenticate(None, \"password\")\napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:127: in check_password_hash\n    method, salt, hashval = pwhash.split(\"$\", 2)\nE   TypeError: cannot unpack non-iterable Mock object"
    },
    {
      "test_id": "test_auth_service::TestInputValidation::test_validate_whitespace_inputs",
      "description": "测试空白字符输入验证",
      "module": "test_auth_service",
      "class": "TestInputValidation",
      "function": "test_validate_whitespace_inputs",
      "markers": [
        "unit"
      ],
      "start_time": "2025-10-01T11:07:55.321422",
      "end_time": "2025-10-01T11:07:55.337509",
      "duration": 0.016074657440185547,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:410: in test_validate_whitespace_inputs\n    auth_service.authenticate(\"   \", \"password\")\napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:127: in check_password_hash\n    method, salt, hashval = pwhash.split(\"$\", 2)\nE   TypeError: cannot unpack non-iterable Mock object",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:410: in test_validate_whitespace_inputs\n    auth_service.authenticate(\"   \", \"password\")\napplication/services/auth_service.py:28: in authenticate\n    if not self._verify_password(password, user.password_hash):\napplication/services/auth_service.py:148: in _verify_password\n    return check_password_hash(password_hash, password)\nvenv/lib/python3.12/site-packages/werkzeug/security.py:127: in check_password_hash\n    method, salt, hashval = pwhash.split(\"$\", 2)\nE   TypeError: cannot unpack non-iterable Mock object"
    },
    {
      "test_id": "test_auth_service::TestSecurityFeatures::test_timing_attack_resistance",
      "description": "测试时序攻击防护",
      "module": "test_auth_service",
      "class": "TestSecurityFeatures",
      "function": "test_timing_attack_resistance",
      "markers": [
        "security"
      ],
      "start_time": "2025-10-01T11:07:55.338655",
      "end_time": "2025-10-01T11:07:55.508972",
      "duration": 0.17028427124023438,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    },
    {
      "test_id": "test_auth_service::TestSecurityFeatures::test_password_complexity_validation",
      "description": "测试密码复杂度验证",
      "module": "test_auth_service",
      "class": "TestSecurityFeatures",
      "function": "test_password_complexity_validation",
      "markers": [
        "security"
      ],
      "start_time": "2025-10-01T11:07:55.509662",
      "end_time": "2025-10-01T11:07:55.738395",
      "duration": 0.22872185707092285,
      "status": "failed",
      "error_message": "../../tests/unit/backend/test_auth_service.py:466: in test_password_complexity_validation\n    with pytest.raises(AuthenticationError):\nE   Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>",
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试失败: ../../tests/unit/backend/test_auth_service.py:466: in test_password_complexity_validation\n    with pytest.raises(AuthenticationError):\nE   Failed: DID NOT RAISE <class 'shared_kernel.exceptions.auth_exceptions.AuthenticationError'>"
    },
    {
      "test_id": "test_auth_service::TestSecurityFeatures::test_xss_prevention_in_error_messages",
      "description": "测试错误消息中的XSS防护",
      "module": "test_auth_service",
      "class": "TestSecurityFeatures",
      "function": "test_xss_prevention_in_error_messages",
      "markers": [
        "security"
      ],
      "start_time": "2025-10-01T11:07:55.739528",
      "end_time": "2025-10-01T11:07:55.740694",
      "duration": 0.0011441707611083984,
      "status": "passed",
      "error_message": null,
      "steps": [],
      "input_data": {},
      "expected_result": "测试应该通过",
      "actual_result": "测试通过"
    }
  ],
  "environment_info": {
    "python_version": "3.12.3 (main, Aug 14 2025, 17:47:21) [GCC 13.3.0]",
    "pytest_version": "7.4.4",
    "operating_system": "posix",
    "frontend_url": "http://localhost:3000",
    "backend_url": "http://localhost:5000"
  },
  "compliance_info": {
    "security_standards": "符合政府安全标准要求",
    "automation_framework": "适用于自动化测试框架",
    "manual_intervention": "最小化人工干预"
  }
}